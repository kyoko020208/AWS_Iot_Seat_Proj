//外部ライブラリの読み込み
require('date-utils');

const deviceModule = require('..').device;
const shkey = "e3e1162eaffb";                      //OMRONカメラのUUID

//OMRONカメラの変数
var g_age;
var g_gen;
var g_exp;
var g_age_con;
var g_gen_con;
var g_exp_sco;
var g_exp_neg;

//AWS IoT設定
var thingName = 'iot_test2';                              //AWS-IoTで作成したthing名
var topic = 'omrontest';                                  //MQTT用変数トピック。AWS側と合わせる
var timerT = 5000;
var dt;                                                            //時刻
var DEVICE = require('..').device;
const device = DEVICE({
	"caPath": "./certs2/root-CA.crt",
	"certPath": "./certs2/5ff1830b19-certificate.pem.crt",
	"keyPath": "./certs2/5ff1830b19-private.pem.key",
	"clientId": "iottest1",
	"region": "us-east-1",
	"reconnectPeriod": 3000
});


function processTest() {
    var timeout;
    var g_time;
    device
      .on('connect', function() {
        var message = "";          //publishするための変数
        var record = "";           //センサーデータ1件ごとの変数
        console.log('AWS-IoT connect');

        // timerTタイマーの間隔ごとにセンサデータ取得＆Publishを実施
        setInterval( function() {
       // ------------------------------------------------------------
       // JavaScript のオブジェクトを用意する
       // ------------------------------------------------------------
            //kibanaで日付として解釈するため、日付型で入力する
            g_time = new Date();
            var obj = {
                timestamp : g_time,
                time : new Date().toString(),
                key : shkey,
                age : g_age,
                age_con : g_age_con,
                gender  : g_gen,
                gender_con : g_gen_con,
                expression: g_exp,
                expression_sco : g_exp_sco,
                expression_neg : g_exp_neg
            };

          console.log("Publish: " + JSON.stringify(obj));
          device.publish(topic, JSON.stringify(obj));
        }, timerT);//Publishタイマ
      });

    device
      .on('close', function() {
        console.log('close');
        clearInterval( timeout );
      });
    device
      .on('reconnect', function() {
        console.log('reconnect');
      });
    device
      .on('offline', function() {
        console.log('offline');
        clearInterval( timeout );
      });
    device
      .on('error', function(error) {
        console.log('error', error);
        clearInterval( timeout );
      });
    device
      .on('message', function(topic, payload) {
        console.log('message', topic, payload.toString());
      });
}

/*******************************************************************************
【オムロンカメラ部分】
*******************************************************************************/
var noble = require('noble');
var _ = require('lodash')

var service_uuid = '35100001-d13a-4f39-8ab3-bf64d4fbb4b4'.replace(/\-/g, '');
var tx_char_uuid    = '35100002-d13a-4f39-8ab3-bf64d4fbb4b4'.replace(/\-/g, '');
var rx_char_uuid    = '35100003-d13a-4f39-8ab3-bf64d4fbb4b4'.replace(/\-/g, '');

var tx, rx;
var rx_buf = new Buffer(0);
var on_response = null;

function clear_rx_buf() {
        rx_buf = new Buffer(0);
}

function on_read(data, isNotification) {
        rx_buf = Buffer.concat([rx_buf, data])

        // check response header
        if (rx_buf[0] != 0xfe) {
                console.log("invalid response data...");
                clear_rx_buf();
                return;
        }

        // check payload length
        var data_len = rx_buf.readUInt32LE(2);
        var response_len = 1 + 1 + 4 + data_len;
        if (rx_buf.length < response_len) {
                // nothing to do...
                return
        }
        else if (rx_buf.length > response_len) {
                console.log("invalid response data...");
                clear_rx_buf();
                return
        }

        var response_code = rx_buf.readUInt8(1);

        if (on_response) {
                on_response(response_code, rx_buf.slice(6, rx_buf.length));
        }
        clear_rx_buf();
}

function hvcc_send_cmd(buf) {
        clear_rx_buf();
        console.log('hvcc_send_cmd() : buf=' + buf.toString('hex'));
        tx.write(buf)
}

function hvcc_version(callback) {
        on_response = function(response_code, data) {
                var str             = data.slice(0, 12).toString();
                var major_version   = data.slice(12, 13).readUInt8(0);
                var minor_version   = data.slice(13, 14).readUInt8(0);
                var release_version = data.slice(15, 16).readUInt8(0);
                var rev             = data.slice(16, 20).toString('hex')

                if (callback) {
                        callback(response_code, str, major_version, minor_version, release_version, rev);
                }
        };

        hvcc_send_cmd(new Buffer('fe000000', 'hex'));
}

function hccv_set_camera_orientation(angle, callback) {
        on_response = function(response_code, data) {
                if (callback) {
                        callback(response_code);
                }
        };

        var n = 0;
        if (angle == 0) {
                n = 0
        }
        else if (angle == 90) {
                n = 1;
        }
        else if (angle == 180) {
                n = 2;
        }
        else if (angle == 270) {
                n = 3;
        }

        var buf = new Buffer(5);
        buf[0] = 0xfe;
        buf[1] = 0x01;
        buf.writeUInt16LE(1, 2); // data length
        buf.writeUInt8(n, 4);    // orientation (0-3)

        hvcc_send_cmd(buf);
}

function parse_body_data(size, data) {
        var result = [];

        for (var i = 0; i < size; ++i) {
                var d = data.slice(i * 8, i * 8 + 8);
                var r = {};
                r.x          = d.readUInt16LE(0);
                r.y          = d.readUInt16LE(2);
                r.size       = d.readUInt16LE(4);
                r.confidence = d.readUInt16LE(6);

                result.push(r);
        }
        return result;
}

function parse_hand_data(size, data) {
        var result = [];

        for (var i = 0; i < size; ++i) {
                var d = data.slice(i * 8, i * 8 + 8);
                var r = {};
                r.x          = d.readUInt16LE(0);
                r.y          = d.readUInt16LE(2);
                r.size       = d.readUInt16LE(4);
                r.confidence = d.readUInt16LE(6);

                result.push(r);
        }
        return result;
}

function parse_face_data(size, data) {
        var result = [];

        for (var i = 0; i < size; ++i) {
                var d = data.slice(i * 31, i * 31 + 31);

                var r = {};
                r.x              = d.readInt16LE(0);
                r.y              = d.readInt16LE(2);
                r.size           = d.readInt16LE(4);
                r.confidence     = d.readUInt16LE(6);

                r.dir = {};
                r.dir.yaw        = d.readInt16LE(8);
                r.dir.pitch      = d.readInt16LE(10);
                r.dir.roll       = d.readInt16LE(12);
                r.dir.confidence = d.readUInt16LE(14);

                r.age = {};
                r.age.age        = d.readInt8(16);
                r.age.confidence = d.readUInt16LE(17);

        //add
        g_age = r.age.age;
        g_age_con = r.age.confidence;

                r.gen = {};
                var gen = d.readInt8(19);
                switch(gen) {
                case 0:
                        r.gen.gender = 'female';
                        break;
                case 1:
                        r.gen.gender = 'male';
                        break;
                default:
                        r.gen.gender = 'unknown';
                }
                r.gen.confidence = d.readUInt16LE(20);

        //add
        g_gen = r.gen.gender;
        g_gen_con = r.gen.confidence;

                r.gaze = {};
                r.gaze.gazeLR    = d.readInt8(22);
                r.gaze.gazeUD    = d.readInt8(23);

                r.blink = {};
                r.blink.ratioL   = d.readInt16LE(24);
                r.blink.ratioR   = d.readInt16LE(26);

                r.exp = {};
                var exp = d.readInt8(28);
                switch(exp) {
                case 1:
                        r.exp.expression = "neutral";
                        break;
                case 2:
                        r.exp.expression = "happiness";
                        break;
                case 3:
                        r.exp.expression = "surprise";
                        break;
                case 4:
                        r.exp.expression = "anger";
                        break;
                case 5:
                        r.exp.expression = "sadness";
                        break;
                default:
                        r.exp.expression = "unknown";
                        break;
                }

                r.exp.score      = d.readInt8(29);
                r.exp.degree     = d.readInt8(30);

        //add
        g_exp = r.exp.expression;
        g_exp_sco = r.exp.score;
        g_exp_neg = r.exp.degree;

                result.push(r);
        }

        return result;
}

// 7/21 要素数を外だし
var body_num;
var hand_num;
var face_num;

function parse_execute_result(data) {
        //
        //  detection result payload format
        //      header(4byte)
        //      body_data(8byte) * body_num
        //      hand_data(8byte) * hand_num
        //      face_data(2～31byte) * face_num
        //

        // header
    /*  7/21 要素数を外部で使うのでコメント
        var body_num = data.readUInt8(0);
        var hand_num = data.readUInt8(1);
        var face_num = data.readUInt8(2);
    */

        body_num = data.readUInt8(0);
        hand_num = data.readUInt8(1);
        face_num = data.readUInt8(2);

        var idx = 4;
        body_data = data.slice(idx, idx + 8 * body_num);

        idx += body_data.length
        hand_data = data.slice(idx, idx + 8 * hand_num);

        idx += hand_data.length
        face_data = data.slice(idx, idx + 31 * face_num);

        result = {};
        result.body = parse_body_data(body_num, body_data);
        result.hand = parse_hand_data(hand_num, hand_data);
        result.face = parse_face_data(face_num, face_data);

        return result;
}

function hccv_execute(callback) {
        console.log('hccv_execute()');

        on_response = function(response_code, data) {
                console.log("hccv_execute() : response_code = " + response_code);

                result = parse_execute_result(data);

                if (callback) {
                        callback(response_code, result);
                }
        };

        var buf = new Buffer(7);
        buf[0] = 0xfe;
        buf[1] = 0x03;
        buf.writeUInt16LE(3, 2); // data length
        buf.writeUInt8(0xfd, 4); // (disable body & hands detection...)
        buf.writeUInt8(0x01, 5);
        buf.writeUInt8(0x00, 6);

        hvcc_send_cmd(buf);
}

function main_loop() {
        setTimeout(function() {
                hccv_execute(function(resonse_code, result) {
                        //console.log(JSON.stringify(result,null,4));
            // 改行なしで出力
            console.log(JSON.stringify(result));

            //
            //console.log("OBJ count=" + Object.keys(result).length);//常に3？(体・手・顔)
            console.log("Body count=" + body_num);
            console.log("Face count=" + face_num);
            if (body_num > 0){
                console.log(JSON.stringify(result.body[0]));
            }




            // 顔を認識していれば年齢が出力されるが、なければエラー
            //console.log("age " + JSON.stringify(result.face[0].age));

                        main_loop();
                });
        }, 3000);
}

function start_hvcc() {
        hvcc_version(function(response_code, str, major_version, minor_version, release_version, rev) {
                console.log("hvcc_version() : str=" + str + ", major_version=" + major_version + ", minor_version=" + minor_version + ", release_version=" + release_version + ", rev=" + rev);

                hccv_set_camera_orientation(0, function(response_code) {
                        main_loop();
                });
        });
}

function connect_hvcc(peripheral) {
        var uuid = peripheral.uuid

        peripheral.connect(function(err) {
                console.log('connect... : uuid=' + uuid);

                peripheral.on('disconnect', function() {
                        console.log('disconnect... : uuid=' + uuid);
                        console.log('start scanning...');

                        on_response = null;
                        noble.startScanning([], false);
                });

                peripheral.discoverServices([], function(err, services) {
                        service = _.find(services, function(s) {return s.uuid === service_uuid});
                        service.discoverCharacteristics([], function(err,chars) {
                                rx = _.find(chars, function(c) {return c.uuid === rx_char_uuid});
                                tx = _.find(chars, function(c) {return c.uuid === tx_char_uuid});

                                rx.notify(true);
                                rx.on('read', on_read);

                                setTimeout(start_hvcc, 1000);
                        });
                });
        });
}


//======================================================================
// 状態がパワーONだったらスキャンに移行
noble.on('stateChange', function(state) {
    console.log('on -> stateChange: ' + state);

    if (state === 'poweredOn') {
        noble.startScanning();
    } else {
        noble.stopScanning();
    }
});

noble.on('scanStart', function() {
    console.log('on -> scanStart');
});

noble.on('scanStop', function() {
    console.log('on -> scanStop');
});

// discover 機器が発見されたら
noble.on('discover', function(peripheral) {
    //console.log('on -> discover: ' + peripheral);
    // まずスキャンをとめる
    //noble.stopScanning();

    var uuid = peripheral.uuid
    var localName = peripheral.advertisement.localName;

        if (localName != null && localName.match(/omron_hvc_/)) {
                noble.stopScanning();

                console.log('HVC-C is found! uuid=' + uuid + ", localName=" + localName);

                setTimeout(function() {
                        connect_hvcc(peripheral);
                }, 5000);
        }

});

processTest();
